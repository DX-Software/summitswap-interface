import React, { useState } from 'react';
import styled from 'styled-components';
import { ethers } from '@ethersproject/experimental/node_modules/ethers';
import axios, { Method } from 'axios';
import AppBody from '../AppBody';
import { CREATE_TOKEN_ADDRESS } from '../../constants/index';
import CREATE_TOKEN_ABI from '../../constants/abis/createTokenAbi.json';

const Form = styled.form`
    display: flex;
    flex-direction: column;
    
`

const Label = styled.label`
    display: flex;
    justify-content: center;
    margin: 1rem 0 1rem 0;
    width: 100%;
`
const LabelText = styled.p`
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(#00d4a4,#008668); 
    border-radius: 30px 0 0 30px;
    padding: 0 1rem 0 1rem;
    flex: 0.4;
`

const Submit = styled.input`
    color: white;
    background: linear-gradient(#00d4a4,#008668); 
    width: 30%;
    height: 2.5rem;
    margin: 1rem auto;
    border-radius: 30px;
    box-shadow: 0px 0px 10px 1px grey;
    transition: 0.5s;
    :hover {
        opacity: 0.75;
        cursor: pointer;
    }
`

const Inputs = styled.input`
    height: 2.5rem;
    padding: 0 1rem 0 1rem;
    border-radius: 0 30px 30px 0;
    background-color: #011724;
    color: white;
    flex: 1;
`

const CreateToken = () => {
    const bytecode = "0x60806040526005805460ff60a01b1916600960a11b17905560016006553480156200002957600080fd5b5060405162000f3b38038062000f3b8339810160408190526200004c9162000369565b8451859085906200006590600390602085019062000210565b5080516200007b90600490602084019062000210565b5050506200009862000092620000d260201b60201c565b620000d6565b620000a4818362000128565b6005805460ff60a01b1916600160a01b60ff861602179055620000c781620000d6565b50505050506200048c565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001835760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000197919062000414565b90915550506001600160a01b03821660009081526020819052604081208054839290620001c690849062000414565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200021e9062000439565b90600052602060002090601f0160209004810192826200024257600085556200028d565b82601f106200025d57805160ff19168380011785556200028d565b828001600101855582156200028d579182015b828111156200028d57825182559160200191906001019062000270565b506200029b9291506200029f565b5090565b5b808211156200029b5760008155600101620002a0565b600082601f830112620002c7578081fd5b81516001600160401b0380821115620002e457620002e462000476565b604051601f8301601f19908116603f011681019082821181831017156200030f576200030f62000476565b816040528381526020925086838588010111156200032b578485fd5b8491505b838210156200034e57858201830151818301840152908201906200032f565b838211156200035f57848385830101525b9695505050505050565b600080600080600060a0868803121562000381578081fd5b85516001600160401b038082111562000398578283fd5b620003a689838a01620002b6565b96506020880151915080821115620003bc578283fd5b50620003cb88828901620002b6565b945050604086015160ff81168114620003e2578182fd5b6060870151608088015191945092506001600160a01b038116811462000406578182fd5b809150509295509295909350565b600082198211156200043457634e487b7160e01b81526011600452602481fd5b500190565b600181811c908216806200044e57607f821691505b602082108114156200047057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610a9f806200049c6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063a9059cbb11610066578063a9059cbb146101fb578063dd62ed3e1461020e578063f2fde38b14610221578063ffa1ad741461023457600080fd5b8063715018a6146101bb5780638da5cb5b146101c557806395d89b41146101e0578063a457c2d7146101e857600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461017f57806370a082311461019257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b61010261023d565b60405161010f91906109b7565b60405180910390f35b61012b61012636600461098e565b6102cf565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610953565b6102e7565b600554600160a01b900460ff1660405160ff909116815260200161010f565b61012b61018d36600461098e565b61030b565b61013f6101a0366004610900565b6001600160a01b031660009081526020819052604090205490565b6101c361032d565b005b6005546040516001600160a01b03909116815260200161010f565b610102610398565b61012b6101f636600461098e565b6103a7565b61012b61020936600461098e565b610422565b61013f61021c366004610921565b610430565b6101c361022f366004610900565b61045b565b61013f60065481565b60606003805461024c90610a2e565b80601f016020809104026020016040519081016040528092919081815260200182805461027890610a2e565b80156102c55780601f1061029a576101008083540402835291602001916102c5565b820191906000526020600020905b8154815290600101906020018083116102a857829003601f168201915b5050505050905090565b6000336102dd818585610526565b5060019392505050565b6000336102f585828561064a565b6103008585856106c4565b506001949350505050565b6000336102dd81858561031e8383610430565b6103289190610a0a565b610526565b6005546001600160a01b0316331461038c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103966000610892565b565b60606004805461024c90610a2e565b600033816103b58286610430565b9050838110156104155760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610383565b6103008286868403610526565b6000336102dd8185856106c4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6005546001600160a01b031633146104b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610383565b6001600160a01b03811661051a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610383565b61052381610892565b50565b6001600160a01b0383166105885760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610383565b6001600160a01b0382166105e95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610383565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006106568484610430565b905060001981146106be57818110156106b15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610383565b6106be8484848403610526565b50505050565b6001600160a01b0383166107285760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610383565b6001600160a01b03821661078a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610383565b6001600160a01b038316600090815260208190526040902054818110156108025760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610383565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610839908490610a0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161088591815260200190565b60405180910390a36106be565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146108fb57600080fd5b919050565b600060208284031215610911578081fd5b61091a826108e4565b9392505050565b60008060408385031215610933578081fd5b61093c836108e4565b915061094a602084016108e4565b90509250929050565b600080600060608486031215610967578081fd5b610970846108e4565b925061097e602085016108e4565b9150604084013590509250925092565b600080604083850312156109a0578182fd5b6109a9836108e4565b946020939093013593505050565b6000602080835283518082850152825b818110156109e3578581018301518582016040015282016109c7565b818111156109f45783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610a2957634e487b7160e01b81526011600452602481fd5b500190565b600181811c90821680610a4257607f821691505b60208210811415610a6357634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220580ac4d8a1731e66af8cfe5c5de2a9dc01b1065e84df971c44c5483000c88c5d64736f6c63430008040033";
    const [name, setName] = useState('');
    const [symbol, setSymbol] = useState('');
    const [decimals, setDecimals] = useState('');
    const [supply, setSupply] = useState('');
    
    const handleSubmit = async (event) => {
        event.preventDefault();
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        console.log("1")
        const signer = provider.getSigner();
        console.log("2")
        const create_token_contract = new ethers.Contract(CREATE_TOKEN_ADDRESS, CREATE_TOKEN_ABI, signer);
        console.log("3")
        await create_token_contract.create(name, symbol, decimals, supply);
        console.log("4")
        const tokens_created = await create_token_contract.tokensMade();
        console.log("5")
        const tokenAddress = await create_token_contract.customTokens(tokens_created - 1);
        console.log("6")
        console.log("Your token's address is:", tokenAddress);

        // const verifyContract = async () => {
        //     console.log("Start verify");
        //     const options = {
        //         method: 'post' as Method,
        //         url: "https://api-testnet.bscscan.com/api",
        //         headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        //         data: {
        //             apikey: '3KEC6B6XT3E336DWV2HBMJ1HF3KZQ86QP7',
        //             module: 'contract',
        //             action: 'verifysourcecode',
        //             sourceCode: '',
        //             contractaddress: tokenAddress,
        //             codeformat: 'solidity-single-file',
        //             contractname: "customToken",
        //             compilerversion: 'v0.8.4+commit.c7e474f2',
        //             optimizationUsed: '0',
        //             constructorArguments: '',
        //             licenseType: '3',
        //         },
        //     }
        //     console.log("Sending verify");
        //     await axios.request(options)
        // }

        // verifyContract();
    }
    
    return (
        <AppBody>
            <Form onSubmit={(e) => {handleSubmit(e)}}>
                <div>
                    <Label htmlFor="name"> 
                        <LabelText>
                            Name
                        </LabelText> 
                        <Inputs 
                            type="text" 
                            name="name" 
                            value={name} 
                            placeholder='Ex: Ethereum' 
                            required
                            onChange={(e) => {setName(e.target.value)}}
                        />
                    </Label>
                </div>
                <div>
                    <Label htmlFor="symbol"> 
                        <LabelText>
                            Symbol
                        </LabelText>  
                        <Inputs 
                            type="text" 
                            name="symbol" 
                            value={symbol} 
                            placeholder='Ex: ETH' 
                            required
                            onChange={(e) => {setSymbol(e.target.value)}}
                        />
                    </Label>
                </div>
                <div>
                     <Label htmlFor="decimals"> 
                        <LabelText>
                            Decimals
                        </LabelText>  
                        <Inputs 
                            type="number" 
                            name="decimals" 
                            value={decimals} 
                            placeholder='Ex: 18' 
                            required
                            onChange={(e) => {setDecimals(e.target.value)}}
                        />
                    </Label>
                </div>
                <div>
                    <Label htmlFor="supply"> 
                        <LabelText>
                            Total Supply
                        </LabelText> 
                        <Inputs 
                            type="number" 
                            name="supply" 
                            value={supply} 
                            placeholder='Ex: 100000000000' 
                            required
                            onChange={(e) => {setSupply(e.target.value)}}
                        />
                    </Label>
                </div>
                <Submit type="submit" value="CREATE TOKEN" />
            </Form>
        </AppBody>
    );
}

export default CreateToken;